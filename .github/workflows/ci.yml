---
name: CI Pipeline

on:
  push:
    branches:
      - '**'
      - '!main'
      - '!alpha'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r service/requirements.txt
          pip install -r .devcontainer/requirements.txt

      - name: Lint code with Flake8 and generate report
        run: |
          mkdir -p reports
          flake8 --tee --output-file=reports/flake8_report.txt service
      
      - name: Upload flake8 report as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: flake8-report
          path: reports/flake8-report.txt
          retention-days: 30
  

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r service/requirements.txt
          pip install -r .devcontainer/requirements.txt

      - name: Check code formatting with Black and generate report
        run: |
          mkdir reports
          black --check --diff service | tee reports/format_report.txt
      
      - name: Upload black report as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: format-report
          path: reports/black-report.txt
          retention-days: 30

      - name: Check code formatting with isort and generate report
        run: |
          isort --check-only --diff service | tee reports/isort_report.txt
      
      - name: Upload isort report as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: isort-report
          path: reports/isort-report.txt
          retention-days: 30


  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [lint, format]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r service/requirements.txt
          pip install -r .devcontainer/requirements.txt

      - name: Run tests with Pytest and generate coverage report
        run: |
          pytest --cov=service --cov-report=xml --cov-report=term

      - name: Upload coverage report as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 30

      - name: Upload coverage results and generate report in Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-umbrella
          files: coverage.xml
          flags: unittests
          verbose: true
          fail_ci_if_error: true

      - name: Run quality and security scan and generate report in SonarCloud
        uses: SonarSource/sonarcloud-github-action@v3.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
